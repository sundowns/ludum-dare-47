[gd_resource type="VisualShader" load_steps=21 format=2]

[sub_resource type="VisualShaderNodeScalarFunc" id=8]
function = 12

[sub_resource type="VisualShaderNodeScalarFunc" id=9]
function = 1

[sub_resource type="VisualShaderNodeScalarOp" id=10]

[sub_resource type="VisualShaderNodeVectorOp" id=12]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=13]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=14]
constant = 0.3

[sub_resource type="VisualShaderNodeScalarOp" id=15]
output_port_for_preview = 0
operator = 6

[sub_resource type="VisualShaderNodeScalarConstant" id=1]
constant = 0.8

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "time"

[sub_resource type="VisualShaderNodeColorUniform" id=3]
output_port_for_preview = 0
uniform_name = "Colour"

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
width = 128
height = 128
seamless = true
noise = SubResource( 4 )

[sub_resource type="VisualShaderNodeTexture" id=6]
output_port_for_preview = 0
texture = SubResource( 5 )

[sub_resource type="VisualShaderNodeScalarFunc" id=11]
function = 0

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=18]
function = 0

[sub_resource type="VisualShaderNodeVectorOp" id=19]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=20]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=21]

[resource]
code = "shader_type spatial;
uniform sampler2D tex_frg_5;
uniform vec4 Colour : hint_color;



void vertex() {
// Input:6
	vec3 n_out6p0 = VERTEX;

// Input:3
	float n_out3p0 = TIME;

// ScalarFunc:4
	float n_out4p0 = sin(n_out3p0);

// Input:2
	vec3 n_out2p0 = NORMAL;

// VectorOp:5
	vec3 n_out5p0 = vec3(n_out4p0) * n_out2p0;

// VectorOp:7
	vec3 n_out7p0 = n_out6p0 + n_out5p0;

// Output:0
	UV = n_out7p0.xy;

}

void fragment() {
// Scalar:15
	float n_out15p0 = 0.300000;

// Input:3
	float n_out3p0 = TIME;

// ScalarFunc:11
	float n_out11p0 = cos(n_out3p0);

// ScalarFunc:8
	float n_out8p0 = sin(n_out3p0);

// ScalarOp:12
	float n_out12p0 = n_out11p0 + n_out8p0;

// ScalarFunc:10
	float n_out10p0 = abs(n_out12p0);

// ScalarOp:16
	float n_out16p0 = max(n_out15p0, n_out10p0);

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, UV.xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// VectorOp:13
	vec3 n_out13p0 = vec3(n_out16p0) * n_out5p0;

// ColorUniform:4
	vec3 n_out4p0 = Colour.rgb;
	float n_out4p1 = Colour.a;

// VectorOp:14
	vec3 n_out14p0 = n_out13p0 * n_out4p0;

// Scalar:2
	float n_out2p0 = 0.800000;

// Output:0
	ALBEDO = n_out14p0;
	ALPHA = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -372.914, -119.5 )
nodes/vertex/0/position = Vector2( 500, 100 )
nodes/vertex/2/node = SubResource( 16 )
nodes/vertex/2/position = Vector2( -240, 240 )
nodes/vertex/3/node = SubResource( 17 )
nodes/vertex/3/position = Vector2( -360, 40 )
nodes/vertex/4/node = SubResource( 18 )
nodes/vertex/4/position = Vector2( -180, 40 )
nodes/vertex/5/node = SubResource( 19 )
nodes/vertex/5/position = Vector2( 64.0859, 173.5 )
nodes/vertex/6/node = SubResource( 20 )
nodes/vertex/6/position = Vector2( 60, -40 )
nodes/vertex/7/node = SubResource( 21 )
nodes/vertex/7/position = Vector2( 260, 40 )
nodes/vertex/connections = PoolIntArray( 3, 0, 4, 0, 4, 0, 5, 0, 2, 0, 5, 1, 6, 0, 7, 0, 5, 0, 7, 1, 7, 0, 0, 4 )
nodes/fragment/0/position = Vector2( 500, 120 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 200, 460 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -1040, -200 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -300, 320 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( -520, -40 )
nodes/fragment/8/node = SubResource( 11 )
nodes/fragment/8/position = Vector2( -800, -140 )
nodes/fragment/10/node = SubResource( 8 )
nodes/fragment/10/position = Vector2( -380, -300 )
nodes/fragment/11/node = SubResource( 9 )
nodes/fragment/11/position = Vector2( -800, -320 )
nodes/fragment/12/node = SubResource( 10 )
nodes/fragment/12/position = Vector2( -560, -300 )
nodes/fragment/13/node = SubResource( 12 )
nodes/fragment/13/position = Vector2( -160, -120 )
nodes/fragment/14/node = SubResource( 13 )
nodes/fragment/14/position = Vector2( 80, 180 )
nodes/fragment/15/node = SubResource( 14 )
nodes/fragment/15/position = Vector2( -560, -460 )
nodes/fragment/16/node = SubResource( 15 )
nodes/fragment/16/position = Vector2( -160, -500 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 1, 3, 0, 8, 0, 3, 0, 11, 0, 8, 0, 12, 1, 11, 0, 12, 0, 5, 0, 13, 1, 4, 0, 14, 1, 13, 0, 14, 0, 14, 0, 0, 0, 15, 0, 16, 0, 16, 0, 13, 0, 12, 0, 10, 0, 10, 0, 16, 1 )
